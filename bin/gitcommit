#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103312104-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$GITCOMMIT_TEMP_FILE" ] && rm -Rf "$GITCOMMIT_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103312104-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : gitcommit --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 21:04 EDT
# @File          : gitcommit
# @Description   : Commit changes to a git repo
# @TODO          : Refactor code
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
  [ -d "$GITCOMMIT_CONFIG_DIR" ] || mkdir -p "$GITCOMMIT_CONFIG_DIR"
  [ -d "$GITCOMMIT_CONFIG_BACKUP_DIR" ] || mkdir -p "$GITCOMMIT_CONFIG_BACKUP_DIR"
  [ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ] &&
    cp -Rf "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE.$$"
  cat <<EOF >"$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
# Settings for gitcommit
GITCOMMIT_NO_CONFIRM="\${GITCOMMIT_NO_CONFIRM:-true}"
GITCOMMIT_PROJECT_DIR="\${GIT_PROJECT_DIR:-$HOME/Projects}"
GITCOMMIT_VERSION_FORMAT="\${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GITCOMMIT_VERSION_FILE="\${GIT_VERSION_FILE:-version.txt}"
GITCOMMIT_TEMP_FILE="${TMPDIR:-/tmp}/gitcommit"
GITCOMMIT_NOTIFY_ENABLED="yes"
GITCOMMIT_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
GITCOMMIT_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$GITCOMMIT_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ]; then
    printf_green "Your config file for gitcommit has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gitcommit() {
  __git_porcelain "$gitdir" && return
  local mess="${1:-$mess}"
  local succ="Successfuly committed the changes to"
  local fail="Failed to commit the changes to"
  local COMMIT=""
  printf_cyan "Commiting Changes with the following message:"
  printf_yellow "$mess"
  __version && git -C "$gitdir" commit -q -S -m "$mess" 2>/dev/null &&
    __getexitcode "$exitCode" "$succ $(__git_repobase "$gitdir")" "$fail $(__git_repobase "$gitdir")" &&
    printf_green "commit ID: $(__git_commitid "$gitdir")" && COMMIT="true" || false
  exitCode=$?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_add() {
  local -a files="$*"
  for f in $files; do
    if [ -e "$f" ]; then
      git -C "$gitdir" add "$f" &>/dev/null
    #else
    #  git -C "$gitdir" rm "$f" &>/dev/null
    fi
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_dir() {
  local gitdir="${1:-$gitdir}"
  local makerepo=""
  if [ "$(git -C "$gitdir" rev-parse --is-inside-work-tree 2>/dev/null)" == "" ]; then
    printf_error "You are not in a git repo"
    printf_read_question "4" "Would you like to turn $gitdir into a git repo? y/N" "1" "makerepo"
    if printf_answer_yes "$makerepo"; then
      gitadmin "$gitdir" setup
      exit $?
    else
      exit
    fi
  fi
  [ -d "$gitdir" ] || printf_exit "$gitdir doesn't seem to be a git repo"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_commitid() {
  git -C "${1:-$gitdir}" rev-parse --short HEAD
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_push() {
  local push=""
  local gitdir="${1:-$gitdir}"
  local repo="$(__git_remote_fetch $gitdir)"
  am_i_online --error || exit 1
  if [ "$repo" != "localdir" ]; then
    if [[ "$*" =~ --automated ]]; then
      printf_green "Pushing the changes to $repo"
      git -C "$gitdir" push -q >/dev/null 2>&1 && exitCode=0 || exitCode=1
      __getexitcode $exitCode "Successfuly pushed the changes for commit ID: $(__git_commitid "$gitdir")" "Failed to push the changes"
    else
      if [ "$GITCOMMIT_NO_CONFIRM" != "true" ]; then
        printf_read_question "3" "Should I push to $repo? [y/n]" "1" "push"
      else
        push="Y"
      fi
      if printf_answer_yes "$push"; then
        printf_green "Pushing the changes to $repo"
        git -C "$gitdir" push -q >/dev/null 2>&1 && exitCode=0 || exitCode=1
        __getexitcode $exitCode "Successfuly pushed the changes for commit ID: $(__git_commitid "$gitdir")" "Failed to push the changes"
      fi
    fi
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__version() {
  if [ -f "$versionfile" ]; then
    date +"$gitversion" >"$versionfile"
    versionbump="🚀 Version Bump: $(cat "$versionfile") 🚀 "
    __git_add "$gitdir/version.txt"
    #git -C "$gitdir" commit -q -S -m "$versionbump" -- "$GITCOMMIT_VERSION_FILE"
    printf_blue "$versionbump"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
GITCOMMIT_CONFIG_FILE="settings.conf"
GITCOMMIT_CONFIG_DIR="$HOME/.config/myscripts/gitcommit"
GITCOMMIT_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/gitcommit/backups"
GITCOMMIT_OPTIONS_DIR="$HOME/.local/share/myscripts/gitcommit/options"
GITCOMMIT_TEMP_FILE="${TMPDIR:-/tmp}/gitcommit"
GITCOMMIT_NOTIFY_ENABLED="yes"
GITCOMMIT_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
GITCOMMIT_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GITCOMMIT_NOTIFY_CLIENT_ICON}"
GITCOMMIT_PROJECT_DIR="${GIT_PROJECT_DIR:-$HOME/Projects}"
GITCOMMIT_VERSION_FORMAT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GITCOMMIT_VERSION_FILE="${GIT_VERSION_FILE:-version.txt}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h,d:,m:"
LONGOPTS="options,config,version,help,dir:,mess:,message:"
ARRAY="status log push version files modified deleted added changed new improved "
ARRAY+="fixed release docs test breaking refactor permissions bugs alot docker node "
ARRAY+="ruby php perl python scratchpad todo notes blog emojify random custom setup reset "
AARAY+="updated enhanced "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$GITCOMMIT_OPTIONS_DIR/options" ] || __list_options "$GITCOMMIT_OPTIONS_DIR" &>/dev/null
[ -f "$GITCOMMIT_OPTIONS_DIR/array" ] || __list_array "$GITCOMMIT_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ]; then
  . "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$GITCOMMIT_OPTIONS_DIR" "$ARRAY"
    __list_options "$GITCOMMIT_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -d | --dir)
    shift 1
    MYCURRDIR="$1"
    shift 1
    ;;
  -m | --mess | --message)
    shift 1
    newmess="$2"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export NOTIFY_CLIENT_NAME="${GITCOMMIT_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${GITCOMMIT_NOTIFY_CLIENT_ICON}"
if [ "$GITCOMMIT_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash git || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
if [ -d "$1" ]; then
  MYCURRDIR="$1"
  shift 1
else
  MYCURRDIR="$PWD"
fi
topdir="$(__git_top_dir $MYCURRDIR 2>/dev/null)"
gitdir="${topdir:-$MYCURRDIR}"
versionfile="$gitdir/$GITCOMMIT_VERSION_FILE"
repo="$(__git_remote_fetch $gitdir)"
basedir="$(basename $gitdir)"
gituser="$(basename "$(dirname "$gitdir")")"
gitversion="$GITCOMMIT_VERSION_FORMAT"
gitprojectdir="$GITCOMMIT_PROJECT_DIR"
[ -n "$repo" ] || repo="localdir"
__git_dir "$gitdir"
MESSAGE="${newmess:-$1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case $MESSAGE in
s | status)
  shift 1
  __git_status "$gitdir"
  exit $?
  ;;

l | log)
  shift 1
  __git_log "$gitdir"
  exit $?
  ;;

push)
  shift 1
  __git_push "$*"
  exit $?
  ;;

version)
  shift 1
  # if __git_porcelain "$gitdir"; then
  #   printf_red "There are no changes to commit"
  #   exit
  # fi
  __version
  printf_cyan "$versionbump"
  git -C "$gitdir" commit -q -m "$versionbump"
  __getexitcode $exitCode "Successfuly committed the new version to $(__git_repobase "$gitdir")" "Failed to commit the version change in ${gitdir//$PWD/.}"
  __git_push --force "$gitdir"
  exit $?
  ;;

files)
  shift 1
  if ! __git_porcelain "$gitdir"; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'M ' | sed 's|^ ||g' | awk -F' ' '{print $2}')"
    filesmsg="$(git -C "$gitdir" status -b -s | sed '/^\#/d;s,^ ,,g;s,??,A,g' | tr '\n' '|' | sed 's#|$##g' | grep '^')"
    mess="➕ $filesmsg ➕ "
    __git_add "$files"
    __gitcommit "$mess"
  else
    printf_exit 1 0 "Nothing has been changed"
  fi
  ;;

modified)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F 'M ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'M ' | awk '{print $2}' | tr '\n' ' ')"
    mess="🗃 Modified: $files 🗃 "
    __git_add "$files"
    __gitcommit "$mess"
  else
    printf_exit 1 0 "Nothing has been modified"
  fi
  ;;

\
  updated)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F 'M ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'M ' | awk '{print $2}' | tr '\n' ' ')"
    mess="🗃 Updated: $files 🗃 "
    __git_add "$files"
    __gitcommit "$mess"
  else
    printf_exit 1 0 "Nothing has been modified"
  fi
  ;;

deleted)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F 'D ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F 'D ' | awk '{print $2}' | tr '\n' ' ')"
    mess="➖ Deleted: $files ➖ "
    __git_add "$files"
    __gitcommit "$mess"
  else
    printf_exit 1 0 "Nothing has been deleted"
  fi
  ;;

added)
  shift 1
  if git -C "$gitdir" status -s -b | grep -F '?? ' >/dev/null 2>&1; then
    files="$(git -C "$gitdir" status -s -b | grep -F '?? ' | awk '{print $2}' | tr '\n' ' ')"
    mess="❓ Added: $files ❓"
    __git_add "$files"
    __gitcommit "$mess"
  else
    printf_exit 1 0 "Nothing has been added"
  fi
  ;;

changed)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME changed filename[s]"
  ARGS="${*:-} "
  mess="✔️🐛 Changed: ${ARGS}🐛✔️"
  __git_add $ARGS
  __gitcommit "$mess"
  ;;

new)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME new filename[s]"
  ARGS="${*:-} "
  mess="🆕📦 NEW: ${ARGS}📦🆕 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

improved)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME improved filename[s]"
  ARGS="${*:-} "
  mess="👌 IMPROVE: ${ARGS}👌 "
  __git_add "$ARGS"
  ;;

fixed)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME fixed filename[s]"
  ARGS="${*:-} "
  mess="🐛 FIXED: ${ARGS}🐛 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

release)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME release filename[s]"
  ARGS="${*:-} "
  mess="🚀 RELEASE: ${ARGS}🚀 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

docs)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME docs filename[s]"
  ARGS="${*} "
  mess="📖 DOCS: ${ARGS}📖 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

test)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME test filename[s]"
  ARGS="${*:-} "
  mess="🤖 TEST: ${ARGS}🤖"
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

breaking)
  shift 1
  [ $# -eq 0 ] && printf_exit "Usage: $APPNAME breaking filename[s]"
  ARGS="${*:-} "
  mess="⚒️ BREAKING: ${ARGS}⚒️ "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

refactor)
  shift 1
  ARGS="${*:-} "
  mess="✔️ 〰️ Refactor Code ${ARGS}〰️ ✔️  "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

performance)
  shift 1
  ARGS="${*:-} "
  mess="🚤 Preformance boost ${ARGS}⏩"
  __git_add "$ARGS"
  ;;

permission | permissions)
  shift 1
  ARGS="${*:-} "
  mess="🏠🔥❗ Fixed Permissions ${ARGS}❗🔥🏠 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

bug | bugs)
  shift 1
  ARGS="${*:-} "
  mess="🐛🦈🏠❗ Bug Fixes ${ARGS}❗🏠🦈🐛 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

alot | fixes)
  shift 1
  ARGS="${*:-} "
  mess="🦈🏠🐜❗ Fixes and Updates ${ARGS}❗🐜🦈🏠 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

docker)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added Docker Workflow ${ARGS}❗🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

node)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added nodejs Workflow ${ARGS}🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

ruby)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added ruby Workflow ${ARGS}❗🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

php)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added php Workflow ${ARGS}❗🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

perl)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added perl Workflow ${ARGS}❗🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

python)
  shift 1
  ARGS="${*:-} "
  mess="🐜❇🦈🏠❗ Added python Workflow ${ARGS}❗🏠🦈❇🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

scratchpad)
  shift 1
  msg="${1:-}"
  shift 1
  ARGS=" ${*:-} "
  mess="🐜📓❇📓 ${msg:-Modified my scratchpad} ${ARGS}📓❇📓🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

todo)
  shift 1
  msg="${1:-}"
  shift 1
  ARGS=" ${*:-} "
  mess="🐜📓❇📓 ${mesg:-Modified my todo list} ${ARGS}📓❇📓🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

notes)
  shift 1
  msg="${1:-}"
  shift 1
  ARGS=" ${*:-} "
  mess="🐜📓❇📓 ${msg:-Modified my notes} ${ARGS}📓❇📓🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

blog)
  shift 1
  msg="${1:-}"
  shift 1
  ARGS=" ${*:-} "
  mess="🐜📓❇📓 ${msg:-New blog post} ${ARGS}📓❇📓🐜 "
  __git_add "$ARGS"
  __gitcommit "$mess"
  ;;

init)
  shift 1
  msg="${*}"
  mess="${msg:-🦈🏠🐜❗ Initial Commit 📍🐜🦈🏠} "
  ;;

emj | emojy | emojify)
  cmd_exists emojify && setemj="$(emojify "$*")" || setemj="$*"
  mess="${setemj:-🦈🏠🐜❗ Well I did some things ❗🐜🦈🏠 }"
  ;;

random)
  shift 1
  mess="🐜➡️  Random: $(curl -s https://commitment.herokuapp.com/index.txt) ⬅️ 🐜 "
  ;;

custom)
  shift 1
  if [ -n "$1" ]; then
    mess=" $1 "
  else
    printf_exit "You must specify your commit message"
  fi
  ;;

setup | reset)
  shift 1
  gitadmin "$gitdir" setup "$@"
  exit
  ;;

*)
  setmessage="${newmess:-$mess}"
  if [ -n "$setmessage" ]; then
    [ ! "$(echo "$setmessage" | wc -m)" -lt "4" ] || printf_exit "Message must be longer than 4 characters"
    mess="$setmessage"
  else
    mess="🦈🏠❗ Well I did things - Hopefully nothing breaks ❗🏠🦈 "
  fi
  ;;
esac
shift

if __git_porcelain "$gitdir"; then
  [ -n "$COMMIT" ] || printf_red "There are no changes to commit in ${basedir}"
else
  if [ -f "$gitdir/gitmasterconfig" ] && [ -d "$gitdir/.git" ]; then
    cp -Rf "$gitdir/gitmasterconfig" "$gitdir/.git/config"
  fi
  if [ -z "$files" ]; then git -C "$gitdir" add . >/dev/null 2>&1; fi
  if [ -z "$mess" ]; then
    __gitcommit "🦈🏠🐜 Fixes and Updates 🐜🦈🏠 " 2>/dev/null && exitCode=0 || exitCode=1
  else
    __gitcommit "$mess" 2>/dev/null && exitCode=0 || exitCode=1
  fi
fi

git_cherry="$(git -C "$gitdir" cherry -v)"
if [ -n "$COMMIT" ] || [ -n "$git_cherry" ]; then
  if am_i_online --error -m "No internet connection. Skipping push"; then
    __git_push
  fi
fi

printf_newline
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
