#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103271625-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103271625-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : ask_yes_no_question --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Saturday, Mar 27, 2021 16:25 EDT
# @File          : ask_yes_no_question
# @Description   : ask user a question and execute command
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE"
  [ -d "$ASK_YES_NO_QUESTION_CONFIG_DIR" ] || mkdir -p "$ASK_YES_NO_QUESTION_CONFIG_DIR"
  [ -d "$ASK_YES_NO_QUESTION_CONFIG_BACKUP_DIR" ] || mkdir -p "$ASK_YES_NO_QUESTION_CONFIG_BACKUP_DIR"
  [ -f "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE" ] &&
    cp -Rf "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE" "$ASK_YES_NO_QUESTION_CONFIG_BACKUP_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE.$$"
  cat <<EOF >"$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE"
# Settings for ask_yes_no_question
ASK_YES_NO_QUESTION_NOTIFY_ENABLED="yes"
ASK_YES_NO_QUESTION_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
ASK_YES_NO_QUESTION_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$ASK_YES_NO_QUESTION_NOTIFY_CLIENT_ICON}"

EOF
  if [ -f "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE" ]; then
    printf_green "Your config file for ask_yes_no_question has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notify_good() {
  local prog="$name"
  local name="${1:-$prog}"
  local message="${command:-Command} was successful"
  if [ -z "$SEND_NOTIFY" ]; then
    __notifications "${prog:-$name}:" "$message" || printf_green "${prog:-$name}: $message"
    export ASK_YES_NO_QUESTION_NOTIFY_ENABLED="${ASK_YES_NO_QUESTION_NOTIFY_ENABLED:-yes}"
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notify_error() {
  local prog="$name"
  local name="${1:-$prog}"
  local message="${command:-Command} has failed"
  if [ -z "$SEND_NOTIFY" ]; then
    __notifications "${prog:-$name}:" "$message" || printf_red "${prog:-$name}: $message"
    export ASK_YES_NO_QUESTION_NOTIFY_ENABLED="${ASK_YES_NO_QUESTION_NOTIFY_ENABLED:-yes}"
  fi
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
printf_question_term() {
  printf_read_question "4" "$1" "1" "REPLY" "-s"
  printf_answer_yes "$REPLY" && eval "${2:-true}" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rofi() { [ "$(printf "No\\nYes" | rofi -dmenu -i -p "$1" -nb purple -sb white -sf black -nf gray)" = "Yes" ] && ${2:-true} || return 1; }
__dmenu() { [ "$(printf "No\\nYes" | dmenu -i -p "$1" -nb purple -sb white -sf black -nf gray)" = "Yes" ] && ${2:-true} || return 1; }
__zenity() { zenity --question --width=400 --text="$1" --ellipsize --default-cancel && $2 || return 1; }
__dialog() { gdialog --trim --cr-wrap --colors --title "question" --yesno "$1" 15 40 && $2 || return 1; }
__term() { printf_question_term "$1" "$2" || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__resend() {
  ASK_YES_NO_QUESTION_QUESTION="$question"
  ASK_YES_NO_QUESTION_COMMAND="$command"
  export ASK_YES_NO_QUESTION_QUESTION ASK_YES_NO_QUESTION_COMMAND
  ${TERMINAL:-myterminal} -e "$APPNAME -t"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
ASK_YES_NO_QUESTION_CONFIG_FILE="settings.conf"
ASK_YES_NO_QUESTION_CONFIG_DIR="$HOME/.config/myscripts/ask_yes_no_question"
ASK_YES_NO_QUESTION_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/ask_yes_no_question/backups"
ASK_YES_NO_QUESTION_OPTIONS_DIR="$HOME/.local/share/myscripts/ask_yes_no_question/options"
ASK_YES_NO_QUESTION_NOTIFY_ENABLED="yes"
ASK_YES_NO_QUESTION_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
ASK_YES_NO_QUESTION_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$ASK_YES_NO_QUESTION_NOTIFY_CLIENT_ICON}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h,t,o"
LONGOPTS="options,config,version,help,term,terminal,off"
ARRAY=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$ASK_YES_NO_QUESTION_OPTIONS_DIR/options" ] || __list_options "$ASK_YES_NO_QUESTION_OPTIONS_DIR" &>/dev/null
[ -f "$ASK_YES_NO_QUESTION_OPTIONS_DIR/array" ] || __list_array "$ASK_YES_NO_QUESTION_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE" ]; then
  . "$ASK_YES_NO_QUESTION_CONFIG_DIR/$ASK_YES_NO_QUESTION_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$ASK_YES_NO_QUESTION_OPTIONS_DIR" "$ARRAY"
    __list_options "$ASK_YES_NO_QUESTION_OPTIONS_DIR"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -t | --term | --terminal)
    shift 1
    launch_term="true"
    RESENT_QUESTION="$ASK_YES_NO_QUESTION_QUESTION"
    RESENT_COMMAND="$ASK_YES_NO_QUESTION_COMMAND"
    ;;
  -o | --off)
    shift 1
    ASK_YES_NO_QUESTION_NOTIFY_ENABLED="no"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${ASK_YES_NO_QUESTION_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${ASK_YES_NO_QUESTION_NOTIFY_CLIENT_ICON}"
if [ "$ASK_YES_NO_QUESTION_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { true; }
fi
appname="${NOTIFY_CLIENT_NAME:-$ASK_YES_NO_QUESTION_NOTIFY_CLIENT_NAME}"
question="${1:-Would you like to proceed?}"
command="${2:-true}"
name="${3:-$appname}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if [ "$launch_term" = "true" ]; then
  printf_newline '\n\n\n\n'
  question="${RESENT_QUESTION}"
  command="${RESENT_COMMAND}"
  __term "$question" "$command" || notify_error
else
  if [ -n "$DISPLAY" ]; then
    if [ -n "$DESKTOP_SESSION" ]; then
      if [ -f "$(command -v zenity 2>/dev/null)" ]; then
        __zenity "$question" "$command" && notify_good "${name:-$appname}" || notify_error "${name:-$appname}"
      elif [ -f "$(command -v rofi 2>/dev/null)" ]; then
        __rofi "$question" "$command" && notify_good "${name:-$appname}" || notify_error "${name:-$appname}"
      elif [ -f "$(command -v dmenu 2>/dev/null)" ]; then
        __dmenu "$question" "$command" && notify_good "${name:-$appname}" || notify_error "${name:-$appname}"
      elif [ -f "$(command -v gdialog 2>/dev/null)" ]; then
        __dialog "$question" "$command" && notify_good "${name:-$appname}" || notify_error "${name:-$appname}"
      elif [ -t 0 ]; then
        __term "$question" "$command" || notify_error
      else
        __resend || notify_error "${name:-$appname}"
      fi
    else
      if [ -t 0 ]; then
        __term "$question" "$command" || notify_error
      else
        __resend || notify_error "${name:-$appname}"
      fi
    fi
  else
    if [ -t 0 ]; then
      __term "$question" "$command" || notify_error
    else
      __resend || notify_error "${name:-$appname}"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
